@page "/game/{Language:int}/{CategoryId:int}"

@using PhotoSpeech.Services.Interfaces
@using PhotoSpeech.DataAccess.Enums
@using PhotoSpeech.DataAccess.Handlers.Interfaces
@using Microsoft.Extensions.Options
@using PhotoSpeech.Options
@using PhotoSpeech.Services

@implements IAsyncDisposable

@inject IJSRuntime Js
@inject IGameService GameService
@inject IWordHandler WordHandler
@inject IScoreHandler ScoreHandler
@inject IOptions<AzureCognitiveOptions> AzureCognitiveOptions
@inject NavigationManager NavigationManager

<div class="d-flex flex-column" style="align-items: center;">
    @if (_isStart && !_isFinish)
    {
        @if (!_isGameLoading)
        {
            <MudAlert Class="mb-3" Severity="Severity.Error" Style="@StyleForAlert(_isErrorAlert)">Wrong answer. Try again.</MudAlert>
            <MudPaper Square="true" Class="indigo lighten-5 d-flex align-center flex-column pa-5 mx-10 my-1"
                      Style="width: 80%;">

                <p class="mb-2" style="font-size: 20px; font-family: 'Press Start 2P',serif">Score: @_score</p>
                <div class="mb-4 d-flex gap-2" style="align-items: center">
                    <MudIcon Icon="@Icons.Material.Filled.Timer" Title="Timer" />
                    <span style="font-size: 12px; font-weight: 200; font-family: 'Press Start 2P',serif">@_timeRemaining s</span>
                </div>

                @if (_timeRemaining == 0)
                {
                    <p class="mb-4">Time's up!</p>
                }

                <MudImage Style="max-height: 50vh; max-width: 100%" Class="imageFit mb-4" Src="@_photoUrl"></MudImage>
                @if (_displayHint)
                {
                    <p class="mud-primary-text" style="font-size: 18px;">
                        Hint: <span style="font-weight: 500">@_word</span>
                    </p>
                }
            </MudPaper>
            <MudButton Class="mud-secondary mt-5" OnClick="OnRestartGame" Disabled="_isRestarting">Restart</MudButton>
        }
        else
        {
            <div class="d-flex" style="height: 40vh; align-items: center;">
                <MudProgressCircular Color="Color.Secondary" Size="Size.Large" Indeterminate="true"/>
            </div>
        }
    }
    else if (_isStart && _isFinish)
    {
        <div class="flex flex-column align-items-center">
            <div class="mb-5">
            @if (_score < 4)
            {
                <p style="text-align: center; font-size: 25px">😢 You need to learn!</p>
            }
            else
            {
                <p style="text-align: center; font-size: 25px">😄 Yay! Good job!</p>
            }
            </div>
            <p class="" style="text-align: center; font-size: 20px; font-weight: 500">Final score: @_score</p>
            <div class="d-flex mt-5" style="justify-content: center">
                <MudButton Class="mud-secondary me-2" OnClick="OnStartGame" Disabled="_isGameLoading">Play again</MudButton>
                <MudButton Class="mud-secondary me-2" OnClick="ToRanking">Ranking</MudButton>
                <MudButton Class="mud-secondary" OnClick="ToMenu">Menu</MudButton>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex flex-column" style="align-items: center">
            <p class="mb-4" style="text-align: center; font-size: 25px">Say what you see in the photos.</p>
            <p class="" style="text-align: center; font-size: 20px">Press start if you are ready.</p>
            <MudButton Class="mt-5 mud-secondary" Style="width: fit-content" OnClick="OnStartGame" Disabled="_isGameLoading">Start</MudButton>
        </div>
    }
</div>

@code {

    [Parameter]
    public Language Language { get; set; }

    [Parameter]
    public int CategoryId { get; set; }

    private JsSpeechService _jsSpeechService = null!;
    private DotNetObjectReference<Game>? _componentRef;

    private readonly int _portion = 20;
    private int _score;
    private int _timeRemaining;
    private PeriodicTimer? _timer;
    private int _failureCounter;
    private bool _displayHint;
    private string _word = "";
    private string _photoUrl = "";
    private List<string> _words = new();
    private List<string> _gameWords = new();
    private readonly Dictionary<string, string> _photosWithLabels = new();
    private bool _isStart;
    private bool _isFinish;
    private bool _isGameLoading;
    private bool _isRestarting;
    private bool _isErrorAlert;

    protected override void OnInitialized()
    {
        _componentRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnParametersSetAsync()
    {
        _words = await WordHandler.GetAllWordsFromCategory(CategoryId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var jsModule = await Js.InvokeAsync<IJSObjectReference?>("import", "./Pages/Game.razor.js");

            if (jsModule is null)
            {
                NavigationManager.NavigateTo($"/");
                return;
            }

            await jsModule.InvokeVoidAsync("setDotNetRef", _componentRef);
            _jsSpeechService = new JsSpeechService(jsModule);
            await _jsSpeechService.InitAzureSpeechService(AzureCognitiveOptions, Language);
        }
    }

    public async ValueTask DisposeAsync()
    {
        await FreeResources();
        await _jsSpeechService.DisposeAsync();
    }

    private async Task OnStartGame()
    {
        if (_isGameLoading) return;
        _isGameLoading = true;
        await InvokeAsync(StateHasChanged);

        _timeRemaining = 60;
        _score = 0;
        _isStart = true;
        _isFinish = false;
        _gameWords = new List<string>(_words);
        _photosWithLabels.Clear();

        _timer = new PeriodicTimer(TimeSpan.FromSeconds(1));

        await OnNextTurn();

        await _jsSpeechService.StartRecognitionSpeech();

        _isGameLoading = false;
        _isRestarting = false;

        StateHasChanged();

        await _timer.WaitForNextTickAsync();

        while (await _timer.WaitForNextTickAsync())
        {
            await OnTimerTick();
        }
    }

    private async Task OnRestartGame()
    {
        if (_isRestarting) return;
        _isRestarting = true;

        await FreeResources();
        await OnStartGame();
    }

    private async Task OnTimerTick()
    {
        _timeRemaining--;
        await InvokeAsync(StateHasChanged);

        if (_timeRemaining <= 0)
        {
            await OnFinish();
        }
    }

    private async Task OnFinish()
    {
        await FreeResources();
        await ScoreHandler.SaveUserScore(_score);
        _word = "";
        _photoUrl = "";
        _isFinish = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnNextTurn()
    {
        if (_photosWithLabels.Count <= _portion / 2 && _gameWords.Any())
        {
            var newPhotosWithLabelsPart = await GameService.GetPhotosWithLabels(
                _gameWords,
                _portion,
                Language);

            foreach (var photoWithLabel in newPhotosWithLabelsPart)
            {
                _photosWithLabels.Add(photoWithLabel.Key, photoWithLabel.Value);
            }
        }

        if (!_photosWithLabels.Any())
        {
            await OnFinish();
            return;
        }

        _word = _photosWithLabels.Keys.First();
        _photoUrl = _photosWithLabels[_word];
        _photosWithLabels.Remove(_word);
        _displayHint = false;
        _failureCounter = 0;
        _isErrorAlert = false;

        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task CheckWord(string word)
    {
        if (string.Equals(word, _word, StringComparison.CurrentCultureIgnoreCase))
        {
            _score++;
            await OnNextTurn();
        }
        else
        {
            _isErrorAlert = true;
            _failureCounter++;

            if (_failureCounter == 5)
            {
                _displayHint = true;
                _failureCounter = 0;
            }
        }
    }

    private async Task FreeResources()
    {
        _timer?.Dispose();
        await _jsSpeechService.StopRecognitionSpeech();
    }

    private void ToMenu()
    {
        NavigationManager.NavigateTo($"/categories");
    }
    
    private void ToRanking()
    {
        NavigationManager.NavigateTo($"/ranking");
    }

    private string StyleForAlert(bool isVisible)
    {
        var finalStyle = "margin-top: -40px; visibility: ";
        if (isVisible)
        {
            finalStyle += "visible;";
        }
        else
        {
            finalStyle += "hidden;";
        }

        return finalStyle;
    }

}